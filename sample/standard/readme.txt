************************************************************
AUTOSAR OS/S32K v.4 sample
readme.txt

NXP(TM) and the NXP logo are trademarks of NXP
All other product or service names are the property of their respective owners.
(c) Copyright 2013 - 2016 Freescale Semiconductor Inc.
Copyright 2017 NXP
All Rights Reserved.

************************************************************
The samples for the following derivatives are provided:
- S32K142
- S32K144
- S32K146
- S32K148

There is one sample to work in both internal ram memory and flash memory:
- for scalability class 1 (SC1)

Sample was configured by default to use only one unified binary file for executing for all derivatives.

A detailed explanation of the files in the sample directory can be found in filelist.txt, in the
root of the install directory.

Building sample.

Before starting building process ensure that the following path variables
are set correctly by OS installation:
in common.mak file:
- GHSDIR       - GreenHills Compiler path
- GCCDIR       - GCC Compiler path
- IARDIR       - IAR Compiler path
- CYGWINDIR    - Path to Cygwin's bin directory
- TRESOS_BASE  - EB tresos Studio path

in each project makefile:
- PROJECT_ROOT - Project path (path to desired sample)
- SSC_ROOT     - standard software core (SSC) path

Note: Compiler path shall be without final backslash.

To build each sample :
 1. Go to directory where desired sample is located ('sample\standard\sc1')

 2. Run GNU make utility ver. 3.81:

        make [-s] <target> ... [<variable>=<value>] ...

           Targets:
              all   - build sample (target by default)
              clean - remove files generated for this sample
              clean_keep_elf - clear only object files for application
              showflags - show options, list of source files etc.

           Variables:
              compiler - type of compiler:
                           ghsarm (by default)  - GreenHills compiler
                           gccarm               - GNU C compiler
                           iararm               - IAR compiler

              flash    - Select type of memory:
                           no (by default)
                           yes
                           
              debug    - Generate Lauterbach command file.
                         As a result the file sample\standard\sc1\output\bin\sample1.cmm,
                           no (by default)
                           yes

              cfg      - config file source: oil, epc or xdm configuration file
                         (value by default: oil)
              
              fpu      - Select whether the Floating-point unit should be supported or not.
                           no (by default)
                           yes

           Examples:
              make                         - build sample with default compiler - GreenHills compiler
                                             and use default memory - ram
              make compiler=ghsarm         - build sample with GHS compiler
              make flash=yes               - build sample with default compiler - GreenHills compiler
                                             and use flash memory
              make debug=yes               - build sample with default (GreenHills) compiler
                                             with generation of Lauterbach command file
              make clean compiler=ghsarm   - clear files for this sample which built with GHS

Note: if you don't have GNU make utility ver.3.81 you can take it from
      the '..\redist' folder.

After building process is completed, the following directories are created:

sample\standard\sc1\output\obj - contains object files and configuration files generated by SysGen
sample\standard\sc1\output\bin - contains executable/loadable file, map file, orti file


To clean each sample project go to directory where desired sample
is located and run:
   make clean compiler=used_compiler

The Sample applications can be executed on the S32K board.

Execution Instructions.


As a result of build process corresponding '.ELF' file is created.
It should be loaded and executed on Evaluation Board.
To ease this process for Lauterbach debugging interface it is possible
to generate Lauterbach script for each sample.
To do so please use ‘debug=yes’ makefile option (without quotes)
during ‘make’ utility invocation.

‘.ELF’ files shall be loaded into the board. If you utilize Lauterbach debugger
this could be done by execution of .\sample\standard\sc1\output\bin\sample1.cmm file.

As a result of execution the following variables are increment each time
a specific event occurs: ind taskRcv1 taskRcv2 taskStop taskSnd1 taskSnd2 taskCnt


EB tresos Studio 21.0.0 configuration sample

All samples makefile can be called with options cfg=xdm or cfg=epc.

If you choose 'epc' the sample1.epc file will be used by SysGen for code
generation instead of sample1.oil.

If you choose 'xdm' the Os.xdm file provided by EB tresos Studio configuration sample
(directory  \os_ts\eclipse\workspace\os_sample_sc1) will be used for code generation.
The path to the XDM file is defined by  XDM_SAMPLE_PATH and XDM_SAMPLE_PATH_MC
variable in makefile for sc1.

The "sample1.epc" is configuration information in AUTOSAR XML format.
This file can be imported by EB tresos Studio. Please refer
to the EB tresos Studio "User Guide" how it should be done.

In some cases the studio may report about the
following error after import:
The value of node "/AUTOSAR/TOP-LEVEL-PACKAGES/OS/ELEMENTS/Os/OsAppMode
/OsAppMode_0/OsAppModeId" is no long-value: ""

If so "OsAppMode_0" attribute has to be deleted to create correct
configuration.

The EB tresos Studio generates the warning message:
The preference "Use maximum SHORT-NAME length of 32 chars (AUTOSAR conform)"
is deactivated and therefore may produce an invalid AUTOSAR file.

Please note that existing make file doesn't support full project build
with EB tresos Studio. The configuration can be modified in EB tresos
Studio. After that code generation can be called from UI or command
line. Please refer to EB tresos Studio "User Guide" how it can be done.
The make file has to be modified with correct path to the results of code
generation to use them.

